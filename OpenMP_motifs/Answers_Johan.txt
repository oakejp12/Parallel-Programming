Johan Oakes - Lab 5 Questions
1. Yes - Sequence-distribution works a lot more efficiently. For my program alone, it is down to my implementations of the two and how they differ so much. For my motif distribution, I had too many garbage OMP pragmas,  divvying up work that was useless, and time spent that could have been cut off if I had looked more into a simple approach. All in all, I made it too hard. Thus, speed up 
2. The schedules were set with dynamic and auto with dynamic taking a chunk size of thread_count. Dynamic performed a little better than the default iteration scheduling. However, it seemed that as the problem size was growing larger, dynamic scheduling would easily outperform it.  I'm guessing the high work imbalance started to take over for the default schedule, but the overhead in dynamic scheduling was minimal against the benefit of having to deal with iterations that takes vastly different from the average time. In case of the auto schedule, it began to perform worse than the default schedule when more threads were being used. This seems weird since the compiler and runtime should do the best they can. It seems that the added work of deciding how to handle workload imbalance and schedule dynamically according to compiler efficiency was more negative. All three schedules performed with speedup growing vertically, and efficiency staying about the same (except for the case of auto scheduling where efficiency was tailing down). 